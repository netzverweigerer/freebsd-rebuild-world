#!/usr/bin/env bash

# vim: set tabstop=2 softtabstop=0 expandtab shiftwidth=2 smarttab:

# Rebuilds both KERNEL and WORLD on a FreeBSD system to
# follow the FreeBSD STABLE release branch.

# This script attempts to automate the task of rebuilding an entire system
# stack of a FreeBSD machine (src / ports, respectively). It obtains a fresh
# clone of both /usr/src and /usr/ports via svn (Subversion), then rebuilds
# world and the kernel using a copy of the GENERIC kernel configuration file
# using the upper-cased version of the hostname of the machine. It will also
# guide the user through those tasks, so minimizes the effects of human error.

##############################################################################
### Copyright (c) <2016> Armin <a@m2m.pm>, released under the terms of the ###
### MIT BSD like license                                                   ###
##############################################################################

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# Define a timestamp for eventually renamed src/ports directories
timestamp="$(date '+%Y-%m-%d__%H-%M-%S')"

# Number of jobs (make) to run simultaneously
jobs=2

# Define kernel configuration file name / architecture / release version
# We use the host-name of the machine (upper-cased), by default
kernconf="$(a="$(hostname)"; b="$(echo "${a%%.*}" | tr '[:lower:]' '[:upper:]')"; echo "$b")"
echo "=== Using kernel configuration (KERNCONF): $kernconf"

# Define system architecture and FreeBSD release version to obtain
arch="amd64"
release="11"

# Define /usr/src / /usr/ports SVN repository URLs
svn_server="svn0.us-west.freebsd.org"
svn_src_url="https://${svn_server}/base/stable/${release}"
svn_ports_url="https://${svn_server}/ports/head"

# Print an error message and exit (with return-code 1)
bailout () {
  tput setaf 1
  echo -n "${0}: Error: "
  echo "$@"
  tput sgr0
  exit 1
}

# Print a message (in case of success)
msg () {
  tput setaf 2
  echo "=== $@"
  tput sgr0
}

# Print a message (in case of success)
msgi () {
  tput setaf 3
  echo "=== $@"
  tput sgr0
}

# include hidden files in globs (for /usr/src / /usr/ports checks)
shopt -s nullglob dotglob

# TODO: get rid of that copy/paste code block mess below, dude
if [ -e /usr/src ]; then
  files=(/usr/src/*)
  if [[ ! "${#files[@]}" -gt 0 ]]; then
    # Edge-case: /usr/src does exist, but is empty
    msg "/usr/src exists, but is empty."
    msg "Obtaining /usr/src via SVN ..."
    sleep 1
    mv /usr/src /usr/src.rebuild.pre.${timestamp}
    cd /usr
    svn co "$svn_src_url" /usr/src
  else
    if [[ ! /usr/src/.svn ]]; then
      msg "/usr/src exists but wasn't obtained via SVN."
      msg "Obtaining fresh copy of /usr/src via SVN ..."
      sleep 1
      mv /usr/src /usr/src.rebuild.pre.${timestamp}
      svn co "$svn_src_url" /usr/src
    else
      # /usr/src exists and is non-empty, so it's safe to call svn up
      msg "Updating /usr/src via SVN ..."
      sleep 1
      cd /usr/src
      svn up
      cd -
    fi
  fi
else
  cd /usr
  msg "Obtaining fresh clone of /usr/src via SVN ..."
  sleep 1
  svn co "$svn_src_url" /usr/src
fi

if [ -e /usr/ports ]; then
  files=(/usr/ports/*)
  if [[ ! "${#files[@]}" -gt 0 ]]; then
    # Edge-case: /usr/ports does exist, but is empty
    msg "/usr/ports exists, but is empty."
    msg "Obtaining /usr/ports via SVN ..."
    sleep 1
    mv /usr/ports /usr/ports.rebuild.pre.${timestamp}
    cd /usr
    svn co "$svn_ports_url" /usr/ports
  else
    if [[ ! /usr/ports/.svn ]]; then
      msg "/usr/ports exists but wasn't obtained via SVN."
      msg "Obtaining fresh copy of /usr/ports via SVN ..."
      sleep 1
      mv /usr/ports /usr/ports.rebuild.pre.${timestamp}
      svn co "$svn_ports_url" /usr/ports
    else
      # /usr/ports exists and is non-empty, so it's safe to call svn up
      msg "Updating /usr/ports via SVN ..."
      sleep 1
      cd /usr/ports
      svn up
      cd -
    fi
  fi
else
  cd /usr
  msg "Obtaining fresh clone of /usr/ports via SVN ..."
  sleep 1
  svn co "$svn_ports_url" /usr/ports
fi

if [ -e /usr/src/sys/${arch}/conf/${kernconf} ]; then
  msg "Using existing kernel configuration file $kernconf"
else
  msg "Generating new kernel configuration file $kernconf (based on GENERIC)..."
  cat /usr/src/sys/${arch}/conf/GENERIC | sed "s/GENERIC/${kernconf}/g" > /usr/src/sys/${arch}/conf/${kernconf}
fi

cd /usr/src

msg "Building WORLD..."
make buildworld -j${jobs}

msg "Building KERNEL (${kernconf})..."
make buildkernel KERNCONF=${kernconf}

msg "Installing KERNEL (${kernconf})..."
make installkernel KERNCONF=${kernconf}

echo
msg "[installkernel] completed."
echo
msg "It's time to reboot and run \"make installworld\" now. ==="
echo
msgi "NOTE: You'll have to reboot after installing the new world distribution:"
echo
echo "[reboot]"
echo "# cd /usr/src"
echo "# make installworld KERNCONF=${kernconf}"
echo "[reboot]"
echo "DONE."
echo ""

exit 0


